[
  {
    "authors": null,
    "categories": null,
    "content": " Intro In recent years bicycle sharing has become more and more present in Oslo. It provides an alternative to other modes of transport as well as filling the gaps left by public transports. They are many benefits provided by bicycle sharing: times of commuting trips can be potentially reduced, no bicycle theft, health improvement\u0026hellip;\nThe main objective of this project is to successfully flag the call for maintenance of a bike. The benefits of such prediction would be obvious for the maintenance teams and thus for bike sharing users.You can find all the R code used for this work here.\nThis project is organized as follows:\n Data analysis  Maintenance log Bike trips log Merging  Prediction  Features Random Forest  Conclusion  Data analysis Maintenance Log In order to make a prediction on the maintenance we need to know when the bikes get broken. To do this we have a maintance log which contains all the repairs for the year 2017. This file contains every single type of repair done on a bike. Since we are only interested in knowing that the bike was repaired and when it was done we can simply aggregate the dataset per bike ID and date.\nLet\u0026rsquo;s be curious at first and check what type of repair is most common. The bar plot shows that we have 3 groups that seems to create most of the repair: chains, breaks and gears. Let\u0026rsquo;s have a look now at the aggregated data per month, weekday and hour to see if we can spot any patterns.\n The bar plot of the frequency per month shows that data starts in April (that is the start of the bike sharing season in Oslo) and ends in Septembre (end of provided file). The mean for a month is ~142 repairs. April and August look a bit busier.  The bar plot of the frequency per weekday shows that weekends seems quieter and that Thursday is the busiest day. We can wonder if weekends are quieter due to low repair staff avaibility. However we would expect Mondays to be much busier in such case. The mean for a day is at ~8 repairs.  The bar plot of the frequency per hour show that mornings are much busier than afternoon. One can think that is due to the bikes being broken late at night the day before.   Bike trips log The bike trips log represents all the trips from April to September 2017. This dataset contains a bike id for each trip id as well as the following features:\n Birth year and gender of the user Localisation and number of locks of the start and end station Time of the start and end of the trip Trip duration  Merging Before we can merge the bike trips and the maintance log together we have to make an assumption: the last trip before repair time has caused the bike to break. There are some limitations to this assumption since the bike could have been broken on some trips before (but not reported) or simply broken on the deck. But I believe we could assume that our assumption is correct most of time.\nSo first we split the end time of each trip into month, day and hour and weekday for the bike trips log. Then the dataset is sorted per bike id per end time before copying the trip start time of the next trip.\n# Sort the data per bike_id and trip end time tripsdt \u0026lt;- as.data.table(trips[order(trips$bike_id,trips$trip_ended_at),]) # Copy the trip start time of the next trip tripsdt[ , next_trip := shift(trip_started_at,type=\u0026quot;lead\u0026quot;)] tripsdt \u0026lt;- tripsdt[, c(1:6,28,7:27)] # NA value when the bike id changes tripsdt \u0026lt;- tripsdt %\u0026gt;% group_by(bike_id) %\u0026gt;% mutate(next_trip= ifelse(row_number()==n(), NA, next_trip)) tripsdt$numnext \u0026lt;-tripsdt$next_trip # Convert time to POSIX tripsdt$next_trip \u0026lt;- as.POSIXct(tripsdt$next_trip, origin=\u0026quot;1970-01-01\u0026quot;,tz=\u0026quot;UTC\u0026quot;)  Now we are ready to merge both logs together using the assumption mentionned earlier. I used SQL to simplify the task!\n### Merge maintenance and bike trip log using SQL library(sqldf) # The merge is done assuming that the last trip before the time of repair has caused the bike to break mge \u0026lt;- sqldf(\u0026quot; SELECT * FROM tripsdt t LEFT JOIN agg a ON t.bike_id = a.bike_id AND a.ndate BETWEEN t.numend AND t.numnext \u0026quot;)  Ok so now we have flagged which trip broke a bike: 1 for broken - 0 otherwise. Then I have performed some cleaning before the next steps: removing rows with NAs for gender or birth year and birth years outside the range 1947-2001 (users must be 16 to have an account).\nLet\u0026rsquo;s analysis who,where and when the bicycles are being broken:\n Gender: the bar plot below does not show any clear distinction between females and males where the percentage of broken bicycles varies around 0.3%. The other category is not relevant here since it contains ony 11 cases.  Age: the bar plot below shows that the older the user the bigger the percentage of broken bicycles.  End stations: the map below does not show any clear areas where the percentage of broken bicycles would have been higher.  Time: the bar plots below show that early mornings, the months of April and August as well as Thrusdays have higher percentages.   Before moving forward we will have a look at the correlation between our \u0026ldquo;broke\u0026rdquo; flag and the other numerical features:\n   bike_id end_station_id trip_duration member_birth_year broke cumduration     0.001222964 0.001560858 0.003753742 -0.002532061 1.000000000 -0.010912075    We can see that none of the numerical features have a high correlation with the flag.\nPrediction Additionnal features The next step is to compute some additionnal features:\n# Flag is TRUE on first trip after reparir - otherwise false mgena$flag \u0026lt;- c(FALSE,diff(mgena$broke) \u0026lt; 0 | diff(mgena$bike_id) != 0) # Flag: 0 if bike does not break - 1 if bike breaks at some point mgena$brokemax \u0026lt;- with(mgena, ave(broke, cumsum(flag == TRUE), FUN = max)) # Cumulative duration until a bike breaks mgena$cumduration \u0026lt;- with(mgena, ave(trip_duration, cumsum(flag == TRUE), FUN = cumsum)) # Index of trips for each bike until it breaks - set back to 1 mgena$groupindex \u0026lt;- with(mgena, ave(bike_id, cumsum(flag == TRUE), FUN = seq_along)) # Maximum number of trips for each bike until it breaks mgena$groupmax \u0026lt;- with(mgena, ave(groupindex, cumsum(flag == TRUE), FUN = max)) # Percentage brokne = how much the bike is broken / 100% when broke mgena$percm \u0026lt;- mgena$groupindex/mgena$groupmax   cumulative trip duration: cumulative sum of the trip duration group index: index within each group group index max: maximum index for each group group broke flag: maximum flag value for each group  A group here is a sub-group of bike id where the boundaries are defined by the first trip after its repair until the next trip where it breaks, i.e. every trips for a given bike until it breaks.\nFinally we can compute a last feature that defines how \u0026ldquo;broken\u0026rdquo; is the bicycle by dividing the group index by group max. And now we have the outcome we want to predict! We will call it percentage broken.It is fair to say here that we have made another assumption which is that the bicycles are getting broken in a linear way.\nRandom Forest First we only want to keep that bikes group that have been broken (we use our group index max for this purpose). Then we retain the following features only:\n Bike id End station id Trip duration Member birthyear Member gender Date: mount, hour and weekday Cummulative duration Percentage borken (our outcome)  Now we can split our data into a training (70% of the trips) and testing dataset (30% of the trips).\nWe are now ready to train our model! Ranger is a fast implementation of random forests (Breiman 2001) or recursive partitioning.\n# Random Forest - Ranger from CARET fitrfm\u0026lt;- train(percm ~ .,data=trainingr, method = \u0026quot;ranger\u0026quot;, trControl = trainControl(method=\u0026quot;cv\u0026quot;, number = 5, verboseIter = T, classProbs = T), num.trees = 100, importance = \u0026quot;permutation\u0026quot;)  Before taking a look at the predictions using our trained model let\u0026rsquo;s see the importance of the features:\n   Features Weights     cumduration 1.000e+02   bike_id 5.002e+01   monthAug 2.673e+01   monthJul 1.716e+01   monthMay 1.386e+01   monthJun 1.056e+01   monthSep 8.242e+00   monthApr 2.549e+00   wdayThursday 8.692e-01   wdayWednesday 6.368e-01   wdayFriday 6.069e-01   hour 5.494e-01   wdaySaturday 4.309e-01   wdayTuesday 4.056e-01   wdayMonday 3.260e-01   trip_duration 2.644e-01   end_station_id 6.339e-02   member_birth_year 4.544e-02   member_genderother 1.038e-02   member_gendermale 9.616e-03    This is not surprising to see the cumulative duration as the top factor for the decision tree. However the month seems to have a great impact as well and we could wonder if this is justified. The dataset we use contains only bicycles trips from 2017. One can wonder if the month feature is really representative. We would need data from other years to confirm it. We will then train our model another time but without the month feature this time. Here are the metrics to assess our models after predicting our outcome percentage borken using the testing dataset:\n    R Square Root Mean Square Error     Model 1 (All features) 0.93 7.8   Model 2 (All features without month) 0.81 12.1    Even though the R square value is decreasing by 12 points it is still a fairly good achievement and so is the Root Mean Square error. As a reminder, a perfect R Square value would be 1 and we want the Root Mean Square error to be as small as possible, e.g. for model 2 we are on average 12.1 points away from the true value.\nWe can now visualise our prediction vs the observed value for the model 2 on the testing dataset: We can see that most of the prediction falls around the perfect fit line. The prediction seems to be more accurate above the oberserved value of 50% which is in our interest.\nConclusion Since we have fairly good accuracy even for the model 2 we could set a flag with a high percentage broken prediction. If we were to choose a value of 90% using model 2 we would have only missed 1.7% of the broken bikes for the testing dataset.\nFurther work could be done to improve the hyper parameters of the model. We could as well challenge our assumption stating that the bicycles get broken in a liner way.\nIf you enjoyed this project and/or have any comments please feel free to contact me!\n",
    "date": 1541199600,
    "expirydate": -62135596800,
    "kind": "page",
    "lang": "en",
    "lastmod": 1541199600,
    "objectID": "10e28e6ca06efd827fc38b3c7339e45d",
    "permalink": "https://gregoirejan.github.io/project/maintenancebike/",
    "publishdate": "2018-11-03T00:00:00+01:00",
    "relpermalink": "/project/maintenancebike/",
    "section": "project",
    "summary": "Project on predictive maintenance of bicycles using Random Forest",
    "tags": [
      "bike sharing",
      "machine learning",
      "random forest",
      "R"
    ],
    "title": "Predictive maintenance of bicycles",
    "type": "project"
  },
  {
    "authors": null,
    "categories": null,
    "content": " In this tutorial, I\u0026rsquo;ll share my top 10 tips for getting started with Academic:\nTip 1 \u0026hellip;\nTip 2 \u0026hellip;\n",
    "date": 1536444000,
    "expirydate": -62135596800,
    "kind": "page",
    "lang": "en",
    "lastmod": 1536444000,
    "objectID": "6a451186c775f5f0adb3a0416d0cb711",
    "permalink": "https://gregoirejan.github.io/tutorial/example/",
    "publishdate": "2018-09-09T00:00:00+02:00",
    "relpermalink": "/tutorial/example/",
    "section": "tutorial",
    "summary": "In this tutorial, I\u0026rsquo;ll share my top 10 tips for getting started with Academic:\nTip 1 \u0026hellip;\nTip 2 \u0026hellip;",
    "tags": null,
    "title": "Example Page",
    "type": "docs"
  },
  {
    "authors": null,
    "categories": null,
    "content": "",
    "date": 1461708000,
    "expirydate": -62135596800,
    "kind": "page",
    "lang": "en",
    "lastmod": 1461708000,
    "objectID": "d1311ddf745551c9e117aa4bb7e28516",
    "permalink": "https://gregoirejan.github.io/project/external-project/",
    "publishdate": "2016-04-27T00:00:00+02:00",
    "relpermalink": "/project/external-project/",
    "section": "project",
    "summary": "This project is a first step into predicting the frequency of bike sharing stations usage in Oslo.",
    "tags": [
      "Bike sharing",
      "machine-learning",
      "urban mobility",
      "R"
    ],
    "title": "Bike Sharing stations usage",
    "type": "project"
  },
  {
    "authors": null,
    "categories": null,
    "content": "",
    "date": 1461708000,
    "expirydate": -62135596800,
    "kind": "page",
    "lang": "en",
    "lastmod": 1461708000,
    "objectID": "6fe31bc46ef3519986f4acd22bac171f",
    "permalink": "https://gregoirejan.github.io/project/losingstreaks/",
    "publishdate": "2016-04-27T00:00:00+02:00",
    "relpermalink": "/project/losingstreaks/",
    "section": "project",
    "summary": "Web-app to check which football teams are 'best' at stopping opponent losing streaks. Githuh repo available [here](https://github.com/GregoireJan/LosingStreak).",
    "tags": [
      "data analysis",
      "football",
      "web-app",
      "python"
    ],
    "title": "Stopping opponent losing streaks",
    "type": "project"
  },
  {
    "authors": [],
    "categories": null,
    "content": " Academic makes it easy to create a beautiful website for free using Markdown. Customize anything on your site with widgets, themes, and language packs.\nFollow our easy step by step guide to learn how to build your own free website with Academic. Check out the personal demo or the business demo of what you\u0026rsquo;ll get in less than 10 minutes.\n View the documentation Ask a question Request a feature or report a bug Updating? View the Update Guide and Release Notes Support development of Academic:  Donate a coffee Decorate your laptop or journal with an Academic sticker Wear the T-shirt   \nKey features:\n Easily manage various content including homepage, blog posts, publications, talks, and projects Extensible via color themes and widgets/plugins Write in Markdown for easy formatting and code highlighting, with LaTeX for mathematical expressions Social/academic network linking, Google Analytics, and Disqus comments Responsive and mobile friendly Simple and refreshing one page design Multilingual and easy to customize  Color Themes Academic is available in different color themes and font themes.\n         Ecosystem Academic Admin: An admin tool to import publications from BibTeX or import assets for an offline site\nInstall You can choose from one of the following four methods to install:\n one-click install using your web browser (recommended) install on your computer using Git with the Command Prompt/Terminal app install on your computer by downloading the ZIP files install on your computer with RStudio  Quick install using your web browser  Install Academic with Netlify  Netlify will provide you with a customizable URL to access your new site  On GitHub, go to your newly created academic-kickstart repository and edit config.toml to personalize your site. Shortly after saving the file, your site will automatically update Read the Quick Start Guide to learn how to add Markdown content. For inspiration, refer to the Markdown content which powers the Demo  Install with Git Prerequisites:\n Download and install Git Download and install Hugo   Fork the Academic Kickstart repository and clone your fork with Git:\ngit clone https://github.com/sourcethemes/academic-kickstart.git My_Website  Note that if you forked Academic Kickstart, the above command should be edited to clone your fork, i.e. replace sourcethemes with your GitHub username.\n Initialize the theme:\ncd My_Website git submodule update --init --recursive   Install with ZIP  Download and extract Academic Kickstart Download and extract the Academic theme to the themes/academic/ folder from the above step  Install with RStudio View the guide to installing Academic with RStudio\nQuick start  If you installed on your computer, view your new website by running the following command:\nhugo server  Now visit localhost:1313 and your new Academic powered website will appear. Otherwise, if using Netlify, they will provide you with your URL.\n Read the Quick Start Guide to learn how to add Markdown content, customize your site, and deploy it. For inspiration, refer to the Markdown content which powers the Demo\n Build your site by running the hugo command. Then host it for free using Github Pages or Netlify (refer to the first installation method). Alternatively, copy the generated public/ directory (by FTP, Rsync, etc.) to your production web server (such as a university\u0026rsquo;s hosting service).\n  Updating Feel free to star the project on Github to help keep track of updates and check out the release notes prior to updating your site.\nBefore updating the framework, it is recommended to make a backup of your entire website directory (or at least your themes/academic directory) and record your current version number.\nBy default, Academic is installed as a Git submodule which can be updated by running the following command:\ngit submodule update --remote --merge  Check out the update guide for full instructions and alternative methods.\nFeedback \u0026amp; Contributing Please use the issue tracker to let me know about any bugs or feature requests, or alternatively make a pull request.\nFor support, head over to the Hugo discussion forum.\nLicense Copyright 2016-present George Cushen.\nReleased under the MIT license.\n",
    "date": 1461103200,
    "expirydate": -62135596800,
    "kind": "page",
    "lang": "en",
    "lastmod": 1515798000,
    "objectID": "279b9966ca9cf3121ce924dca452bb1c",
    "permalink": "https://gregoirejan.github.io/post/getting-started/",
    "publishdate": "2016-04-20T00:00:00+02:00",
    "relpermalink": "/post/getting-started/",
    "section": "post",
    "summary": "Create a beautifully simple website or blog in under 10 minutes.",
    "tags": [
      "Academic"
    ],
    "title": "Academic: the website designer for Hugo",
    "type": "post"
  },
  {
    "authors": null,
    "categories": null,
    "content": " Welcome to Slides Academic\nFeatures  Efficiently write slides in Markdown 3-in-1: Create, Present, and Publish your slides Supports speaker notes Mobile friendly slides  Controls  Next: Right Arrow or Space Previous: Left Arrow Start: Home Finish: End Overview: Esc Speaker notes: S Fullscreen: F Zoom: Alt + Click PDF Export: E  Code Highlighting Inline code: variable\nCode block:\nporridge = \u0026quot;blueberry\u0026quot; if porridge == \u0026quot;blueberry\u0026quot;: print(\u0026quot;Eating...\u0026quot;)  Math In-line math: $x + y = z$\nBlock math:\n$$ f\\left( x \\right) = \\;\\frac{{2\\left( {x + 4} \\right)\\left( {x - 4} \\right)}}{{\\left( {x + 4} \\right)\\left( {x + 1} \\right)}} $$\nFragments Make content appear incrementally\n{{% fragment %}} One {{% /fragment %}} {{% fragment %}} **Two** {{% /fragment %}} {{% fragment %}} Three {{% /fragment %}}  Press Space to play!\nOne  Two  Three \nA fragment can accept two optional parameters:\n class: use a custom style (requires definition in custom CSS) weight: sets the order in which a fragment appears  Speaker Notes Add speaker notes to your presentation\n{{% speaker_note %}} - Only the speaker can read these notes - Press `S` key to view {{% /speaker_note %}}  Press the S key to view the speaker notes!\n Only the speaker can read these notes Press S key to view   Themes  black: Black background, white text, blue links (default) white: White background, black text, blue links league: Gray background, white text, blue links beige: Beige background, dark text, brown links sky: Blue background, thin dark text, blue links   night: Black background, thick white text, orange links serif: Cappuccino background, gray text, brown links simple: White background, black text, blue links solarized: Cream-colored background, dark green text, blue links  Custom Slide Customize the slide style and background\n{{\u0026lt; slide background-image=\u0026quot;/img/boards.jpg\u0026quot; \u0026gt;}} {{\u0026lt; slide background-color=\u0026quot;#0000FF\u0026quot; \u0026gt;}} {{\u0026lt; slide class=\u0026quot;my-style\u0026quot; \u0026gt;}}  Custom CSS Example Let\u0026rsquo;s make headers navy colored.\nCreate assets/css/reveal_custom.css with:\n.reveal section h1, .reveal section h2, .reveal section h3 { color: navy; }  Questions? Ask\nDocumentation\n",
    "date": -62135596800,
    "expirydate": -62135596800,
    "kind": "page",
    "lang": "en",
    "lastmod": -62135596800,
    "objectID": "c2915ec5da95791851caafdcba9664af",
    "permalink": "https://gregoirejan.github.io/slides/example-slides/",
    "publishdate": "0001-01-01T00:00:00Z",
    "relpermalink": "/slides/example-slides/",
    "section": "slides",
    "summary": "Welcome to Slides Academic\nFeatures  Efficiently write slides in Markdown 3-in-1: Create, Present, and Publish your slides Supports speaker notes Mobile friendly slides  Controls  Next: Right Arrow or Space Previous: Left Arrow Start: Home Finish: End Overview: Esc Speaker notes: S Fullscreen: F Zoom: Alt + Click PDF Export: E  Code Highlighting Inline code: variable\nCode block:\nporridge = \u0026quot;blueberry\u0026quot; if porridge == \u0026quot;blueberry\u0026quot;: print(\u0026quot;Eating...\u0026quot;)  Math In-line math: $x + y = z$",
    "tags": null,
    "title": "Slides",
    "type": "slides"
  }
]